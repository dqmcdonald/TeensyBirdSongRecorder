// Sunrise data and calculation of whether recording should start
// Times are in NZST and each month has 31 days of data as the max possible.



typedef struct
{
  uint8_t month;  // month of data
  uint8_t day;    // day of data
  uint8_t hour;   // sunrise hour
  uint8_t min;    // sunrise min

} Sunrise_data_s;

static const Sunrise_data_s sunrise_data[] = {
  { 1, 1, 4, 51 },
  { 1, 2, 4, 52 },
  { 1, 3, 4, 52 },
  { 1, 4, 4, 53 },
  { 1, 5, 4, 54 },
  { 1, 6, 4, 55 },
  { 1, 7, 4, 56 },
  { 1, 8, 4, 57 },
  { 1, 9, 4, 59 },
  { 1, 10, 5, 0 },
  { 1, 11, 5, 1 },
  { 1, 12, 5, 2 },
  { 1, 13, 5, 3 },
  { 1, 14, 5, 4 },
  { 1, 15, 5, 6 },
  { 1, 16, 5, 7 },
  { 1, 17, 5, 8 },
  { 1, 18, 5, 9 },
  { 1, 19, 5, 11 },
  { 1, 20, 5, 12 },
  { 1, 21, 5, 13 },
  { 1, 22, 5, 15 },
  { 1, 23, 5, 16 },
  { 1, 24, 5, 17 },
  { 1, 25, 5, 19 },
  { 1, 26, 5, 20 },
  { 1, 27, 5, 21 },
  { 1, 28, 5, 23 },
  { 1, 29, 5, 24 },
  { 1, 30, 5, 25 },
  { 1, 31, 5, 27 },
  { 2, 1, 5, 28 },
  { 2, 2, 5, 30 },
  { 2, 3, 5, 31 },
  { 2, 4, 5, 32 },
  { 2, 5, 5, 34 },
  { 2, 6, 5, 35 },
  { 2, 7, 5, 37 },
  { 2, 8, 5, 38 },
  { 2, 9, 5, 39 },
  { 2, 10, 5, 41 },
  { 2, 11, 5, 42 },
  { 2, 12, 5, 44 },
  { 2, 13, 5, 45 },
  { 2, 14, 5, 46 },
  { 2, 15, 5, 48 },
  { 2, 16, 5, 49 },
  { 2, 17, 5, 50 },
  { 2, 18, 5, 52 },
  { 2, 19, 5, 53 },
  { 2, 20, 5, 55 },
  { 2, 21, 5, 56 },
  { 2, 22, 5, 57 },
  { 2, 23, 5, 59 },
  { 2, 24, 6, 0 },
  { 2, 25, 6, 1 },
  { 2, 26, 6, 3 },
  { 2, 27, 6, 4 },
  { 2, 28, 6, 5 },
  { 2, 29, 6, 7 },
  { 2, 30, 6, 7 },
  { 2, 31, 6, 7 },
  { 3, 1, 6, 7 },
  { 3, 2, 6, 8 },
  { 3, 3, 6, 9 },
  { 3, 4, 6, 10 },
  { 3, 5, 6, 12 },
  { 3, 6, 6, 13 },
  { 3, 7, 6, 14 },
  { 3, 8, 6, 15 },
  { 3, 9, 6, 17 },
  { 3, 10, 6, 18 },
  { 3, 11, 6, 19 },
  { 3, 12, 6, 21 },
  { 3, 13, 6, 22 },
  { 3, 14, 6, 23 },
  { 3, 15, 6, 24 },
  { 3, 16, 6, 25 },
  { 3, 17, 6, 27 },
  { 3, 18, 6, 28 },
  { 3, 19, 6, 29 },
  { 3, 20, 6, 30 },
  { 3, 21, 6, 32 },
  { 3, 22, 6, 33 },
  { 3, 23, 6, 34 },
  { 3, 24, 6, 35 },
  { 3, 25, 6, 36 },
  { 3, 26, 6, 38 },
  { 3, 27, 6, 39 },
  { 3, 28, 6, 40 },
  { 3, 29, 6, 41 },
  { 3, 30, 6, 42 },
  { 3, 31, 6, 44 },
  { 4, 1, 6, 45 },
  { 4, 2, 6, 46 },
  { 4, 3, 6, 47 },
  { 4, 4, 6, 48 },
  { 4, 5, 6, 49 },
  { 4, 6, 6, 51 },
  { 4, 7, 6, 52 },
  { 4, 8, 6, 53 },
  { 4, 9, 6, 54 },
  { 4, 10, 6, 55 },
  { 4, 11, 6, 57 },
  { 4, 12, 6, 58 },
  { 4, 13, 6, 59 },
  { 4, 14, 7, 0 },
  { 4, 15, 7, 1 },
  { 4, 16, 7, 2 },
  { 4, 17, 7, 4 },
  { 4, 18, 7, 5 },
  { 4, 19, 7, 6 },
  { 4, 20, 7, 7 },
  { 4, 21, 7, 8 },
  { 4, 22, 7, 9 },
  { 4, 23, 7, 11 },
  { 4, 24, 7, 12 },
  { 4, 25, 7, 13 },
  { 4, 26, 7, 14 },
  { 4, 27, 7, 15 },
  { 4, 28, 7, 16 },
  { 4, 29, 7, 18 },
  { 4, 30, 7, 19 },
  { 4, 31, 7, 20 },
  { 5, 1, 7, 20 },
  { 5, 2, 7, 21 },
  { 5, 3, 7, 22 },
  { 5, 4, 7, 23 },
  { 5, 5, 7, 24 },
  { 5, 6, 7, 26 },
  { 5, 7, 7, 27 },
  { 5, 8, 7, 28 },
  { 5, 9, 7, 29 },
  { 5, 10, 7, 30 },
  { 5, 11, 7, 31 },
  { 5, 12, 7, 32 },
  { 5, 13, 7, 33 },
  { 5, 14, 7, 34 },
  { 5, 15, 7, 35 },
  { 5, 16, 7, 36 },
  { 5, 17, 7, 37 },
  { 5, 18, 7, 39 },
  { 5, 19, 7, 40 },
  { 5, 20, 7, 41 },
  { 5, 21, 7, 42 },
  { 5, 22, 7, 43 },
  { 5, 23, 7, 44 },
  { 5, 24, 7, 45 },
  { 5, 25, 7, 45 },
  { 5, 26, 7, 46 },
  { 5, 27, 7, 47 },
  { 5, 28, 7, 48 },
  { 5, 29, 7, 49 },
  { 5, 30, 7, 50 },
  { 5, 31, 7, 51 },
  { 6, 1, 7, 52 },
  { 6, 2, 7, 52 },
  { 6, 3, 7, 53 },
  { 6, 4, 7, 54 },
  { 6, 5, 7, 55 },
  { 6, 6, 7, 55 },
  { 6, 7, 7, 56 },
  { 6, 8, 7, 57 },
  { 6, 9, 7, 57 },
  { 6, 10, 7, 58 },
  { 6, 11, 7, 58 },
  { 6, 12, 7, 59 },
  { 6, 13, 7, 59 },
  { 6, 14, 8, 0 },
  { 6, 15, 8, 0 },
  { 6, 16, 8, 1 },
  { 6, 17, 8, 1 },
  { 6, 18, 8, 2 },
  { 6, 19, 8, 2 },
  { 6, 20, 8, 2 },
  { 6, 21, 8, 2 },
  { 6, 22, 8, 3 },
  { 6, 23, 8, 3 },
  { 6, 24, 8, 3 },
  { 6, 25, 8, 3 },
  { 6, 26, 8, 3 },
  { 6, 27, 8, 3 },
  { 6, 28, 8, 3 },
  { 6, 29, 8, 3 },
  { 6, 30, 8, 3 },
  { 6, 31, 8, 3 },
  { 7, 1, 8, 3 },
  { 7, 2, 8, 3 },
  { 7, 3, 8, 3 },
  { 7, 4, 8, 3 },
  { 7, 5, 8, 2 },
  { 7, 6, 8, 2 },
  { 7, 7, 8, 2 },
  { 7, 8, 8, 1 },
  { 7, 9, 8, 1 },
  { 7, 10, 8, 1 },
  { 7, 11, 8, 0 },
  { 7, 12, 8, 0 },
  { 7, 13, 7, 59 },
  { 7, 14, 7, 58 },
  { 7, 15, 7, 58 },
  { 7, 16, 7, 57 },
  { 7, 17, 7, 57 },
  { 7, 18, 7, 56 },
  { 7, 19, 7, 55 },
  { 7, 20, 7, 54 },
  { 7, 21, 7, 54 },
  { 7, 22, 7, 53 },
  { 7, 23, 7, 52 },
  { 7, 24, 7, 51 },
  { 7, 25, 7, 50 },
  { 7, 26, 7, 49 },
  { 7, 27, 7, 48 },
  { 7, 28, 7, 47 },
  { 7, 29, 7, 46 },
  { 7, 30, 7, 45 },
  { 7, 31, 7, 44 },
  { 8, 1, 7, 43 },
  { 8, 2, 7, 41 },
  { 8, 3, 7, 40 },
  { 8, 4, 7, 39 },
  { 8, 5, 7, 38 },
  { 8, 6, 7, 37 },
  { 8, 7, 7, 35 },
  { 8, 8, 7, 34 },
  { 8, 9, 7, 33 },
  { 8, 10, 7, 31 },
  { 8, 11, 7, 30 },
  { 8, 12, 7, 28 },
  { 8, 13, 7, 27 },
  { 8, 14, 7, 26 },
  { 8, 15, 7, 24 },
  { 8, 16, 7, 23 },
  { 8, 17, 7, 21 },
  { 8, 18, 7, 20 },
  { 8, 19, 7, 18 },
  { 8, 20, 7, 17 },
  { 8, 21, 7, 15 },
  { 8, 22, 7, 13 },
  { 8, 23, 7, 12 },
  { 8, 24, 7, 10 },
  { 8, 25, 7, 9 },
  { 8, 26, 7, 7 },
  { 8, 27, 7, 5 },
  { 8, 28, 7, 4 },
  { 8, 29, 7, 2 },
  { 8, 30, 7, 0 },
  { 8, 31, 6, 58 },
  { 9, 1, 6, 57 },
  { 9, 2, 6, 55 },
  { 9, 3, 6, 53 },
  { 9, 4, 6, 51 },
  { 9, 5, 6, 50 },
  { 9, 6, 6, 48 },
  { 9, 7, 6, 46 },
  { 9, 8, 6, 44 },
  { 9, 9, 6, 43 },
  { 9, 10, 6, 41 },
  { 9, 11, 6, 39 },
  { 9, 12, 6, 37 },
  { 9, 13, 6, 35 },
  { 9, 14, 6, 34 },
  { 9, 15, 6, 32 },
  { 9, 16, 6, 30 },
  { 9, 17, 6, 28 },
  { 9, 18, 6, 26 },
  { 9, 19, 6, 24 },
  { 9, 20, 6, 23 },
  { 9, 21, 6, 21 },
  { 9, 22, 6, 19 },
  { 9, 23, 6, 17 },
  { 9, 24, 6, 15 },
  { 9, 25, 6, 13 },
  { 9, 26, 6, 12 },
  { 9, 27, 6, 10 },
  { 9, 28, 6, 8 },
  { 9, 29, 6, 6 },
  { 9, 30, 6, 4 },
  { 9, 31, 6, 2 },
  { 10, 1, 6, 2 },
  { 10, 2, 6, 1 },
  { 10, 3, 5, 59 },
  { 10, 4, 5, 57 },
  { 10, 5, 5, 55 },
  { 10, 6, 5, 53 },
  { 10, 7, 5, 52 },
  { 10, 8, 5, 50 },
  { 10, 9, 5, 48 },
  { 10, 10, 5, 46 },
  { 10, 11, 5, 45 },
  { 10, 12, 5, 43 },
  { 10, 13, 5, 41 },
  { 10, 14, 5, 39 },
  { 10, 15, 5, 38 },
  { 10, 16, 5, 36 },
  { 10, 17, 5, 34 },
  { 10, 18, 5, 33 },
  { 10, 19, 5, 31 },
  { 10, 20, 5, 29 },
  { 10, 21, 5, 28 },
  { 10, 22, 5, 26 },
  { 10, 23, 5, 25 },
  { 10, 24, 5, 23 },
  { 10, 25, 5, 21 },
  { 10, 26, 5, 20 },
  { 10, 27, 5, 18 },
  { 10, 28, 5, 17 },
  { 10, 29, 5, 15 },
  { 10, 30, 5, 14 },
  { 10, 31, 5, 12 },
  { 11, 1, 5, 11 },
  { 11, 2, 5, 10 },
  { 11, 3, 5, 8 },
  { 11, 4, 5, 7 },
  { 11, 5, 5, 6 },
  { 11, 6, 5, 4 },
  { 11, 7, 5, 3 },
  { 11, 8, 5, 2 },
  { 11, 9, 5, 1 },
  { 11, 10, 5, 0 },
  { 11, 11, 4, 58 },
  { 11, 12, 4, 57 },
  { 11, 13, 4, 56 },
  { 11, 14, 4, 55 },
  { 11, 15, 4, 54 },
  { 11, 16, 4, 53 },
  { 11, 17, 4, 52 },
  { 11, 18, 4, 51 },
  { 11, 19, 4, 50 },
  { 11, 20, 4, 50 },
  { 11, 21, 4, 49 },
  { 11, 22, 4, 48 },
  { 11, 23, 4, 47 },
  { 11, 24, 4, 46 },
  { 11, 25, 4, 46 },
  { 11, 26, 4, 45 },
  { 11, 27, 4, 45 },
  { 11, 28, 4, 44 },
  { 11, 29, 4, 44 },
  { 11, 30, 4, 43 },
  { 11, 31, 4, 43 },
  { 12, 1, 4, 43 },
  { 12, 2, 4, 42 },
  { 12, 3, 4, 42 },
  { 12, 4, 4, 42 },
  { 12, 5, 4, 41 },
  { 12, 6, 4, 41 },
  { 12, 7, 4, 41 },
  { 12, 8, 4, 41 },
  { 12, 9, 4, 41 },
  { 12, 10, 4, 41 },
  { 12, 11, 4, 41 },
  { 12, 12, 4, 41 },
  { 12, 13, 4, 41 },
  { 12, 14, 4, 41 },
  { 12, 15, 4, 41 },
  { 12, 16, 4, 41 },
  { 12, 17, 4, 42 },
  { 12, 18, 4, 42 },
  { 12, 19, 4, 42 },
  { 12, 20, 4, 43 },
  { 12, 21, 4, 43 },
  { 12, 22, 4, 44 },
  { 12, 23, 4, 44 },
  { 12, 24, 4, 45 },
  { 12, 25, 4, 45 },
  { 12, 26, 4, 46 },
  { 12, 27, 4, 47 },
  { 12, 28, 4, 47 },
  { 12, 29, 4, 48 },
  { 12, 30, 4, 49 },
  { 12, 31, 4, 50 },
};

#define DAYS_PER_MONTH 31

// This version checks the day, month and minute to see if it's +/- 1 of sunrise + offset. If so
bool checkForSunrise(int offset) {

#ifdef DEBUG
  Serial.print("checkForSunrise: Enter with offset: ");
  Serial.println(offset);
#endif
 
  // Get current date and time
  int current_month = month();
  int current_day = day();
  int current_hour = hour();
  int current_minute = minute();
  int current_timestamp = now();

#ifdef DEBUG
  Serial.print("  checkForSunrise: current month:");
  Serial.println(current_month);
  Serial.print("  checkForSunrise: current day:");
  Serial.println(current_day);
  Serial.print("  checkForSunrise: current hour:");
  Serial.println(current_hour);
  Serial.print("  checkForSunrise: current minute:");
  Serial.println(current_minute);
  Serial.print("  checkForSunrise: current timestamp:");
  Serial.println(current_timestamp);
  
#endif

  //Compute the index into the list of sunrise times
  int idx = (current_month - 1) * DAYS_PER_MONTH + current_day - 1;
#ifdef DEBUG
  Serial.print("  checkForSunrise: index:");
  Serial.println(idx);
#endif

  // Retrieve the time we should be on:
  int on_hour = (int)sunrise_data[idx].hour;
  int on_min = (int)sunrise_data[idx].min;

  // Correct for offset:
  on_min = on_min + offset;
  if (on_min >= 60) {
    on_hour += 1;
    on_min = on_min - 60;
  }
  if (on_min < 0) {  // Offset can be negative
    on_hour -= 1;
    on_min = 60 + on_min;
  }

#ifdef DEBUG
  Serial.print("  checkForSunrise: on_hour:");
  Serial.println(on_hour);

  Serial.print("  checkForSunrise: on_min:");
  Serial.println(on_min);
  delay(500);
#endif

  bool do_record = false;
  if (current_hour == on_hour && current_minute == on_min) {
    do_record = true;
  }

  Serial.print("  checkForSunrise: do_record:");
  Serial.println(do_record);

  return do_record;
}
